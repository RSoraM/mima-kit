import { describe, expect, it } from 'vitest'
import * as pkcs1 from '../src/cipher/pkcs/pkcs1'
import { rsa } from '../src/cipher/pkcs/rsa'
import { HEX, UTF8 } from '../src/core/codec'
import { U8 } from '../src/core/utils'
import { sha256 } from '../src/hash/sha256'

const { pkcs1_es_1_5, pkcs1_es_oaep } = pkcs1
const { pkcs1_ssa_1_5, pkcs1_ssa_pss } = pkcs1

describe('pkcs#1', () => {
  const m = UTF8('meow, 喵， 🐱')
  // Test RSA key generation and primitive operations
  it('rsa-1024-primitive', () => {
    const key = rsa(1024)
    const c_primitive = key.encrypt(m)
    const m_primitive = key.decrypt(U8.fromBI(c_primitive))
    expect(U8.fromBI(m_primitive)).toMatchObject(m)
    const s_primitive = key.sign(m)
    const v_primitive = key.verify(U8.fromBI(s_primitive))
    expect(U8.fromBI(v_primitive)).toMatchObject(m)
  })
  // RSA key pair generated by openssl
  const k = {
    n: 23034080759402304954888991887802936735581020885665804692622785350787833273336027165800162576643838272814069629997780257763268774904296946407410169722772195017541865386041868676644094723536583363632943297373887810704590403746600324371386072918199011912739739106757252537669855062664499713068797496332808041215435285453504152166404650385585541987491395587410485926961498584998114679811776955935327243542488505836673816774191840071042560769570332886799373666503006760407148607803169790337578683254767532523634222461003336205601885814533750902064700739776673052922508824355085867516473069592820928726324340661538666438001n,
    e: 65537n,
    d: 1714209104594852708492608452238907233172853703490514201555291072087484920335715783385829881365716960007264015844304341840316016843015815443381015621540150247326806842658986619720100755223842684887116504330098463755580798269577395395830771830323817703007545806878361044936099975542572355319139509420083382813045239893385986546211290733460894117483909304791683295825774787918505185794122982214472273311683090574562460992157247455036411515047693512937811065749535735794780136188890205494034509465966286027698508703822803534269342157011917819950339003482232734188492513631978734291383622720106600899383102949405070239483n,
    p: 175925677156926875499174098551522017056607943612981648655590557225779632088379734462875947824883450783116629825852744859318970414428483766827694041298372995292058766408130273618762492034688096181117464042609737633468262537717705882763738071155259693313372820164074053526477708404484124771992437417364360705891n,
    q: 130930749459931034031927233494845062690141198400963536802657812322173203795519525741233331674430612844732631140205593794808227047229543180741916474275364801388744161323832619980346208469165511138556131653085933424324409789007204438224267105253343587294282731704392104467429908538791706637605350029247996445211n,
    dP: 165357305230124899381252185342230438541389586440631544885856513497841300893299840439952368677431383313853005131033295441262928994747922548126797884309318041869338236579959791490543807457417744552799728169198465572449837074071298386838675331235241117355139321636738967258663454807455667576403163783963938225473n,
    dQ: 44769018487992958811380706705921586429396739474910232329993117114417494298698400176011989097644317000131430050519052616809703829918470987949488171140525959905402565132761114807506876811351296811021321607855145675048990630664547419872249287602761439304172936429249472344029125844115283794529781479247117694443n,
    qInv: 160937167178207524295610451814066095385572147263777716867708329696414608083973997132045861957529058792413591004332654412998518712757807599489050843117756319807618529703557350579355329922371276634128961839426287628239395280190483331041945498565822329466355581303125609486447364335254610856872471221022309989881n,
  }
  const key = rsa(k)
  // Test RSA encryption schemes: RSAES-PKCS1-v1_5 and RSAES-OAEP
  it('rsa-2048-pkcs-es', () => {
    const c_1_5 = pkcs1_es_1_5(key).encrypt(m)
    const c_1_5_from_outside = HEX('84c17540d4808633e4783319fb4f4424f9fdf89a4b0fd84d57042f8cd39fa72846941fc3c180cfcb9f6cba5a71a26315f508fc24d2da3413144d646bed49ecf026f378af78325f8dfdc06728a01f511654640e745a7d8bad952b1b252c4426da27ab6c6fa6804aa5a134703eb72f13efd2b8cef6b41c4e00bbf5521fdf2ac69743ae2b7d1548c73d9c8403beaf8363177c0890264a6b4366167a00547f6cb7c9346879eab55e764dfb69d09ff56ac4fca61e115317eff1dc05c36b0555aa7dac0173bb637d98b84333fdfd022d150f3086d290b02e5acea6c41642fbd57166df4b049d1c1f2bf8a0d01f22d264567417a36774434d85a4ed0ef27bbd162a28a9')
    expect(pkcs1_es_1_5(key).decrypt(c_1_5)).toMatchObject(m)
    expect(pkcs1_es_1_5(key).decrypt(c_1_5_from_outside)).toMatchObject(m)

    const c_oaep = pkcs1_es_oaep(key, sha256).encrypt(m)
    const c_oaep_from_outside = HEX('4a93b17defee62de1bf30e6ba8be7a4d9d88e46feabdb402054fecfa097eb6491b46b49426b4fd114c9b10f407f2b40ea4531d93bd151805f4b6e37b64a0bae1e5a959a9d1d691bfe6d215a5cefc57ab31093915f82ba5b3903dddbf7582c539cf379ce4c51e24d710308abbe07c9aa2cb9d48fc2a8de1c76bf5e4d3b1bdb949608bd66958087c5185e097d11816d262418b451412172e687f52508714a43c8e0f605ae8c5bfb2344617e46912261e3b579ce4e50f066b123c9e047d6f570dcff7c175e1b261798997bdec6ce1292c023f55ae13492f2d6c4c89225b86940b250aea40c1e141a9813cab18e55168a3697ec38865576e04e5035d351c9872cebc')
    expect(pkcs1_es_oaep(key, sha256).decrypt(c_oaep)).toMatchObject(m)
    expect(pkcs1_es_oaep(key, sha256).decrypt(c_oaep_from_outside)).toMatchObject(m)
  })
  // Test RSA signature schemes: RSASSA-PKCS1-v1_5 and RSASSA-PSS
  it('rsa-2048-pkcs-ssa', () => {
    const s_sha256_1_5 = pkcs1_ssa_1_5(key, sha256).sign(m)
    expect(s_sha256_1_5.to(HEX)).toMatchInlineSnapshot(`"5151d45e0b652f5c5e2f0a794b35c8b821cdad3f3c3530c22a897aae3e8c662bf7003027d328dccbd9a705828deab583799d3454b287c03db5f759a643d6d81693cfb1e3c96eaef26df883e571dc66f20c84543c3bffeba5a0b1d732929bd36b60b1bbe553f020c3cb9f7045d95b1ca3f51f601a02b78ce164e155af128cf0dfe96c078d8caec9aae1748d76195e0dd919de6546b7eb8ea9332170eef491e519d8af4690183465fbb343f9a3ef71e71bc3ffc790d23e5617aed1733969b8b1ed3e5c64b0808305ef7759d8b95b9139ce2e88cd493379c12e152c2087591d26f2a38a9acccb28201d3a4546dc50e64c4dfc4a788a8d15a0597524f39fe55388b9"`)
    expect(pkcs1_ssa_1_5(key, sha256).verify(m, s_sha256_1_5)).toBe(true)

    const s_sha256_pss = pkcs1_ssa_pss(key, sha256).sign(m)
    const s_sha256_pss_from_outside = HEX('2f5acb4d2082078ab320cf1a06b5d383ab864b77ee5530e0e1657371e6af8f50c0bf3935def1a1f53f1f4fae22e3ecfabc1cc39e95725a76f216f002577a8329815e89f27bd94531f2c2d06d4bc6d9166caa59b501165e1bf41109baaa36cf436dba853a19e98990f3b5eee256540f65aa92ded4b511b6a18748168a5914061ad4742868c3393620060979caeca05aedc75f93ae27f07188ef7b17e06dd2132459e57c5a161686af36c698064c5936f8e76de1c1e11aeaace86694e187c24e20a1049e986a90e0e0b44af8d2c75443d4b18bbac8b15bf043f70077043ff885cd331b02bc15c94eda152cbef8eed024f6667b8c1f07cd4df8c705116d9fca48ad')
    expect(pkcs1_ssa_pss(key, sha256).verify(m, s_sha256_pss)).toBe(true)
    expect(pkcs1_ssa_pss(key, sha256).verify(m, s_sha256_pss_from_outside)).toBe(true)
  })
})
